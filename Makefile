
# Location of website files
SITE_DIR=site

# Location of website images
SITE_IMAGES_DIR=$(SITE_DIR)/images

# List of targets that are not files
.PHONY: all quick clean web print pdf screen quickpdf cleantmp cleanpdf cleanimages html images cleansite

all: pdf cleantmp
quick: quickpdf cleantmp
clean: cleantmp cleanpdf
web: images html

# Generate a print version PDF (for lulu.com)
print:
	xelatex '\def\mediaformat{print}\input{gitt}'
	makeindex gitt
	xelatex '\def\mediaformat{print}\input{gitt}'
	xelatex '\def\mediaformat{print}\input{gitt}'

# Generate the PDF (on-screen version)
pdf:
	xelatex '\def\mediaformat{screen}\input{gitt}'
	makeindex gitt
	xelatex '\def\mediaformat{screen}\input{gitt}'
	xelatex '\def\mediaformat{screen}\input{gitt}'

# An alias for generated the PDF
screen: pdf

# Quickly update the PDF. Will not update the index or cross-references
quickpdf:
	xelatex gitt

# Remove the temporary files generated by LaTeX
cleantmp:
	rm -f *.aux *.log *.out *.toc *.idx *.ind *.ilg

# Remove the generated PDF
cleanpdf:
	rm -f gitt.pdf

# Remove the generated website images
cleanimages:
	@rm -f $(SITE_IMAGES_DIR)/*.png

# Clean up generated site files
cleansite:
	@rm -fr $(SITE_DIR)

# Convert TeX to HTML
html: $(SITE_IMAGES_DIR)
	@python scripts/htmlbuild.py
	@cp images/f*.png $(SITE_IMAGES_DIR)/

# Get a list of all SVG images
IMAGES=$(shell ls images/source/*.svg)

# Generate list of images required for the website
SITEIMAGES=$(shell for IMAGE in $(IMAGES); do echo "$$(basename $${IMAGE} .svg).png"; done)

# Generate PNG file from SVG file
%.png: images/source/%.svg $(SITE_IMAGES_DIR)
	inkscape -f $< -D -d 150 -e $(SITE_IMAGES_DIR)/$(shell basename $< .svg).png >/dev/null

# Convert all images
images: $(SITEIMAGES)

# Make directories
$(SITE_DIR):
	@mkdir -p $(SITE_DIR)

$(SITE_IMAGES_DIR):
	@mkdir -p $(SITE_IMAGES_DIR)

